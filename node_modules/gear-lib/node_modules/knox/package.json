{
  "name": "knox",
  "description": "Amazon S3 client",
  "keywords": [
    "aws",
    "amazon",
    "s3"
  ],
  "version": "0.0.11",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@learnboost.com"
  },
  "main": "./lib/index.js",
  "engines": {
    "node": ">= 0.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/LearnBoost/knox.git"
  },
  "bugs": {
    "url": "http://github.com/LearnBoost/knox/issues"
  },
  "dependencies": {
    "mime": "*"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "directories": {
    "lib": "./lib"
  },
  "readme": "\r\n# knox\r\n\r\n Node Amazon S3 Client.\r\n\r\n## Features\r\n\r\n  - Familiar API (`client.get()`, `client.put()`, etc)\r\n  - Uses node's crypto library (fast!, the others used native js)\r\n  - Very node-like low-level request api via `http.Client`\r\n  - Highly documented\r\n\r\n## Authors\r\n\r\n  - TJ Holowaychuk ([visionmedia](https://github.com/visionmedia))\r\n  - Domenic Denicola ([domenic](https://github.com/domenic))\r\n\r\n## Examples\r\n\r\nThe following examples demonstrate some capabilities of knox and the S3 REST\r\nAPI. First things first, create an S3 client:\r\n\r\n```js\r\nvar client = knox.createClient({\r\n    key: '<api-key-here>'\r\n  , secret: '<secret-here>'\r\n  , bucket: 'learnboost'\r\n});\r\n```\r\n\r\nBy default knox will send all requests to the global endpoint\r\n(bucket.s3.amazonaws.com). This works regardless of the region where the bucket\r\nis. But if you want to manually set the endpoint (for performance reasons) you\r\ncan do it with the `endpoint` option.\r\n\r\n### PUT\r\n\r\nBelow we do several things, first we read _Readme.md_ into memory,\r\nand initialize a client request via `client.put()`, passing the destination\r\nfilename as the first parameter (_/test/Readme.md_), and some headers. Then\r\nwe listen for the _response_ event, just as we would for any `http.Client`\r\nrequest, if we have a 200 response, great! output the destination url to\r\nstdout.\r\n\r\n```js\r\nfs.readFile('Readme.md', function(err, buf){\r\n  var req = client.put('/test/Readme.md', {\r\n      'Content-Length': buf.length\r\n    ,  'Content-Type': 'text/plain'\r\n  });\r\n  req.on('response', function(res){\r\n    if (200 == res.statusCode) {\r\n      console.log('saved to %s', req.url);\r\n    }\r\n  });\r\n  req.end(buf);\r\n});\r\n```\r\n\r\nBy default the _x-amz-acl_ header is _public-read_, meaning anyone can __GET__\r\nthe file. To alter this simply pass this header to the client request method.\r\n\r\n```js\r\nclient.put('/test/Readme.md', { 'x-amz-acl': 'private' });\r\n```\r\n\r\nEach HTTP verb has an alternate method with the \"File\" suffix, for example\r\n`put()` also has a higher level method named `putFile()`, accepting a src\r\nfilename and performs the dirty work shown above for you. Here is an example\r\nusage:\r\n\r\n```js\r\nclient.putFile('my.json', '/user.json', function(err, res){\r\n  // Logic\r\n});\r\n```\r\n\r\nAnother alternative is to stream via `Client#putStream()`, for example:\r\n\r\n```js\r\nvar stream = fs.createReadStream('data.json');\r\nclient.putStream(stream, '/some-data.json', function(err, res){\r\n  // Logic\r\n});\r\n```\r\n\r\n(Note that this only works with file streams currently.)\r\n\r\nAn example of moving a file:\r\n\r\n```js\r\nclient.put('0/0/0.png', {\r\n    'Content-Type': 'image/jpeg'\r\n  , 'Content-Length': '0'\r\n  , 'x-amz-copy-source': '/test-tiles/0/0/0.png'\r\n  , 'x-amz-metadata-directive': 'REPLACE'\r\n}).on('response', function(res) {\r\n  // Logic\r\n}).end();\r\n```\r\n\r\n### GET\r\n\r\nBelow is an example __GET__ request on the file we just shoved at S3. It simply\r\noutputs the response status code, headers, and body.\r\n\r\n```js\r\nclient.get('/test/Readme.md').on('response', function(res){\r\n  console.log(res.statusCode);\r\n  console.log(res.headers);\r\n  res.setEncoding('utf8');\r\n  res.on('data', function(chunk){\r\n    console.log(chunk);\r\n  });\r\n}).end();\r\n```\r\n\r\n### DELETE\r\n\r\nDelete our file:\r\n\r\n```js\r\nclient.del('/test/Readme.md').on('response', function(res){\r\n  console.log(res.statusCode);\r\n  console.log(res.headers);\r\n}).end();\r\n```\r\n\r\nLikewise we also have `client.deleteFile()` as a more concise (yet less\r\nflexible) solution:\r\n\r\n```js\r\nclient.deleteFile('/test/Readme.md', function(err, res){\r\n  // Logic\r\n});\r\n```\r\n\r\n## Running Tests\r\n\r\nTo run the test suite you must first have an S3 account, and create\r\na file named _./auth_, which contains your credentials as json, for example:\r\n\r\n```json\r\n{\r\n  \"key\":\"<api-key-here>\",\r\n  \"secret\":\"<secret-here>\",\r\n  \"bucket\":\"<your-bucket-name>\"\r\n}\r\n```\r\n\r\nThen install the dev dependencies and execute the test suite:\r\n\r\n    $ npm install\r\n    $ npm test\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "_id": "knox@0.0.11",
  "dist": {
    "shasum": "9ede38f7a765ca5e9ad20729a1e9877a99913469"
  },
  "_from": "knox@0.0.x"
}
