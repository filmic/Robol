{
  "name": "fs-extra",
  "version": "0.1.2",
  "description": "fs-extra contains methods that aren't included in the vanilla Node.js fs package.",
  "homepage": [
    "https://github.com/jprichardson/node-fs-extra"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/jprichardson/node-fs-extra"
  },
  "keywords": [
    "fs",
    "file",
    "file system",
    "copy",
    "directory",
    "extra",
    "mkdirp",
    "recursive"
  ],
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/jprichardson/node-fs-extra/raw/master/LICENSE"
    }
  ],
  "dependencies": {
    "rimraf": "1.0.x",
    "ncp": "0.2.x",
    "mkdirp": "0.3.x"
  },
  "devDepdencies": {
    "mocha": "1.3.x",
    "growl": "1.5.x",
    "coffee-script": "1.3.x",
    "test-util": "0.1.x",
    "path-extra": "0.0.x"
  },
  "main": "./lib/index",
  "readme": "Node.js: fs-extra\n=================\n\nThis module adds a few extra file system methods that aren't included in the native `fs` module. It is a drop in replacement for `fs`.\n\nInstallation\n------------\n\n    npm install fs-extra\n\nUsage\n-----\n\n```javascript\nvar fs = require('fs-extra');\n```\n\nNaming\n------\n\nI put a lot of thought into the naming of these function. Inspired by @coolaj86's request. So he deserves much of the credit for raising the issue. See discussion(s) here:\n\n* https://github.com/jprichardson/node-fs-extra/issues/2\n* https://github.com/flatiron/utile/issues/11\n* https://github.com/ryanmcgrath/wrench-js/issues/29\n* https://github.com/substack/node-mkdirp/issues/17\n\nFirst, I believe that in as many cases as possible, the [Node.js naming schemes](http://nodejs.org/api/fs.html) should be chosen. However, there are problems with the Node.js own naming schemes.\n\nFor example, `fs.readFile()` and `fs.readdir()`: the **F** is capitalized in *File* and the **d** is not capitalized in *dir*. Perhaps a bit pedantic, but they should still be consistent. Also, Node.js has chosen a lot of POSIX naming schemes, which I believe is great. See: `fs.mkdir()`, `fs.rmdir()`, `fs.chown()`, etc.\n\nWe have a dilemma though. How do you consistently name methods perform the following POSIX commands: `cp`, `cp -r`, `mkdir -p`, and `rm -rf`?\n\nMy perspective: when in doubt, err on the side of simplicity. Consider that for a moment. A directory is just a hierarchical grouping of directories and files. So when you want to copy it or remove it, in most cases you'll want to copy or remove all of its contents. When you want to create a directory, if the directory that it's suppose to be contained in does not exist, then in most cases you'll want to create that too. \n\nSo, if you want to remove a file or a directory regardless of whether it has contents, just call `fs.remove(path)` or its alias `fs.delete(path)`. If you want to copy a file or a directory whether it has contents, just call `fs.copy(source, destination)`. If you want to create a directory regardless of whether its parent directories exist, just call `fs.mkdir(path)`. (Note: you can still use the native Node.js `fs.mkdir()` method by requiring `fs` and calling `mkdir` on that object)\n\n\nCompromise\n----------\n\nIf you feel that this module should add functionality, please let me know. If you don't like the naming scheme, let me know that as well. I'm willing to work with the community so that we can develop a logical grouping of file system functions that aren't found Node.js.\n\n\nMethods\n-------\n\n**NOTE:** You can still use the native Node.js methods. They are copied over to `fs-extra`.\n\n### copy()\n\nCopy a file or directory. The directory can have contents. Like `cp -r`. There isn't a synchronous version implemented yet.\n\nExamples:\n\n```javascript\nvar fs = require('fs-extra');\n\nfs.copy('/tmp/myfile', '/tmp/mynewfile', function(err){\n  if (err) {\n    console.error(err);\n  }\n  else {\n    console.log(\"success!\")\n  }\n}); //copies file\n\nfs.copy('/tmp/mydir', '/tmp/mynewdir'function(err){\n  if (err) {\n    console.error(err);\n  }\n  else {\n    console.log(\"success!\")\n  }\n}); //copies directory, even if it has subdirectories or files\n```\n\n\n### remove()\n\nRemoves a file or directory. The directory can have contents. Like `rm -rf`.\n\nAlias: `delete()`.\n\nExamples:\n\n```javascript\nvar fs = require('fs-extra');\n\nfs.remove('/tmp/myfile', function(err){\n  if (err) {\n    console.error(err);\n  }\n  else {\n    console.log(\"success!\")\n  }\n});\n\nfs.removeSync('/home/jprichardson'); //I just deleted my entire HOME directory. \n```\n\n\n### mkdir()\n\nCreates a directory. If the parent hierarchy doesn't exist, it's created. Like `mkdir -p`.\n\nExamples:\n\n```javascript\nvar fs = require('fs');\nvar fse = require('fs-extra');\n\nfse.mkdir('/tmp/some/long/path/that/prob/doesnt/exist', function(err){\n  if (err) {\n    console.error(err);\n  }\n  else {\n    console.log(\"success!\")\n  }\n});\n\nfse.mkdirSync('/tmp/another/path');\n\n//now use Node.js native mkdir()\n\nfs.mkdir('/tmp/node/cant/do/this', function(err){\n  console.log('this wasnt successful');\n});\n```\n\n### exists() / existsSync()\n\nThese methods are actually from `path`. But in Node v0.8 they are moved from `path` to `fs`. So you might as well start future proofing your code now.\n\n\n## License\n\nLicensed under MIT\n\nCopyright (c) 2011-2012 JP Richardson\n\n[1]: http://nodejs.org/docs/latest/api/fs.html \n\n",
  "_id": "fs-extra@0.1.2",
  "_from": "fs-extra@0.1.2"
}
