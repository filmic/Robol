// Generated by CoffeeScript 1.3.3
(function() {
  var balUtilFlow, balUtilHTML;

  balUtilFlow = (typeof require === "function" ? require(__dirname + '/flow') : void 0) || this.balUtilFlow;

  balUtilHTML = {
    getAttribute: function(attributes, attribute) {
      var match, regex, value;
      regex = new RegExp("(" + attribute + ")\\s*=\\s*('[^']+'|\\\"[^\\\"]+\\\"|[^'\\\"\\s]\\S*)", 'ig');
      value = null;
      while (match = regex.exec(attributes)) {
        value = match[2].trim().replace(/(^['"]\s*|\s*['"]$)/g, '');
      }
      return value;
    },
    detectIndentation: function(source) {
      var indentation, result;
      result = /\n([ \t]*)\S/m.exec(source);
      indentation = (result != null ? result[1] : void 0) || '';
      return indentation;
    },
    removeIndentation: function(source) {
      var indentation, regex, regexString, result;
      indentation = balUtilHTML.detectIndentation(source);
      regexString = indentation.replace(/\t/g, '\\t');
      regex = new RegExp("^" + regexString, 'gm');
      result = source.replace(regex, '').trim();
      return result;
    },
    replaceElement: function(source, elementNameMatcher, replaceElementCallback) {
      var regex, result;
      regex = new RegExp("<(" + elementNameMatcher + "(?:\\:[-:_a-z0-9]+)?)([^>]*)>([\\s\\S]+?)<\\/\\1>", 'ig');
      result = source.replace(regex, function(outerHTML, elementNameMatched, attributes, innerHTML) {
        innerHTML = balUtilHTML.removeIndentation(innerHTML);
        return replaceElementCallback(outerHTML, elementNameMatched, attributes, innerHTML);
      });
      return result;
    },
    replaceElementAsync: function(source, elementNameMatcher, replaceElementCallback, next) {
      var result, tasks;
      tasks = new balUtilFlow.Group(function(err) {
        if (err) {
          return next(err);
        }
        return next(null, result);
      });
      result = balUtilHTML.replaceElement(source, elementNameMatcher, function(outerHTML, elementNameMatched, attributes, innerHTML) {
        var random;
        random = Math.random();
        tasks.push(function(complete) {
          return replaceElementCallback(outerHTML, elementNameMatched, attributes, innerHTML, function(err, replaceElementResult) {
            if (err) {
              return complete(err);
            }
            result = result.replace(random, replaceElementResult);
            return complete();
          });
        });
        return random;
      });
      tasks.sync();
      return this;
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = balUtilHTML;
  } else {
    this.balUtilHTML = balUtilHTML;
  }

}).call(this);
